{"name":"etag-cache","tagline":"HTTP requests backed by an ETag cache","body":"# etag-cache [![Build Status](https://travis-ci.org/kevinsawicki/etag-cache.png)](https://travis-ci.org/kevinsawicki/etag-cache)\r\n\r\nLibrary to make transparent HTTP requests that can be served locally when\r\nthe server replies with a `304 Not Modified` response for a `If-None-Match`\r\nheader set by the client.\r\n\r\nThe library is available from [Maven Central](http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22com.github.kevinsawicki%22%20AND%20a%3A%22etag-cache%22):\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.github.kevinsawicki</groupId>\r\n  <artifactId>etag-cache</artifactId>\r\n  <version>0.6</version>\r\n</dependency>\r\n```\r\n\r\n## License\r\n\r\n  * [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\r\n\r\n## Examples\r\n\r\n### Making a request using a 10 MB cache\r\n\r\n```java\r\nFile file = new File(\"/tmp/http-cache\");\r\nEtagCache cache = EtagCache.create(file, TEN_MB);\r\nCacheRequest request = CacheRequest.get(\"http://google.com\", cache);\r\nSystem.out.println(\"Response was \" + request.body());\r\nif (request.cached())\r\n  System.out.println(\"Cache hit\");\r\nelse\r\n  System.out.println(\"Cache miss\");\r\n```\r\n\r\n## Dependencies\r\n\r\n  * [kevinsawicki/http-request](https://github.com/kevinsawicki/http-request)\r\n  * [JakeWharton/DiskLruCache](https://github.com/JakeWharton/DiskLruCache)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}